pipeline {
    agent any

    tools {
        jdk 'jdk21'
    }

    environment {
        DOCKER_USERNAME = 'rushi2323'
        DOCKER_NAME     = "${DOCKER_USERNAME}/adservice"
        IMAGE_NAME      = 'adservice'
        EMAIL           = 'rushimane2606@gmail.com'
    }

    stages {
        stage("Clean Workspace") {
            steps { cleanWs() }
        }

        stage("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/rushi2828/microservices-demo.git'
            }
        }

        // --- Trivy FS Scan ---
        stage("Trivy File Scan") {
            steps {
                dir('src/adservice') {
                    sh '''
                    trivy fs . --severity CRITICAL,HIGH --exit-code 1 --scanners vuln,misconfig,secret > trivy-fs-report.txt || true
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/adservice/trivy-fs-report.txt'
                }
            }
        }

        // --- Build Docker Image ---
        stage("Build Docker Image") {
            steps {
                dir('src/adservice') {
                    script {
                        env.IMAGE_TAG = "${DOCKER_NAME}:${BUILD_NUMBER}"
                        sh "docker rmi -f ${IMAGE_NAME} ${env.IMAGE_TAG} || true"
                        sh "docker build -t ${IMAGE_NAME} ."
                        sh "docker tag ${IMAGE_NAME} ${env.IMAGE_TAG}"
                    }
                }
            }
        }

        // --- Push Docker Image ---
        stage("Push to DockerHub") {
            steps {
                dir('src/adservice') {
                    withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${dockerpwd}"
                        sh "docker push ${IMAGE_TAG}"
                        sh "docker tag ${IMAGE_NAME} ${DOCKER_NAME}:latest"
                        sh "docker push ${DOCKER_NAME}:latest"
                    }
                }
            }
        }

        // --- Trivy Image Scan (commented out) ---
        // stage("Trivy Scan Image") {
        //     steps {
        //         dir('src/adservice') {
        //             sh '''
        //             trivy image -f json -o trivy-image-ad.json ${IMAGE_TAG}
        //             trivy image -f table -o trivy-image-ad.txt ${IMAGE_TAG}
        //             '''
        //         }
        //     }
        //     post {
        //         always {
        //             archiveArtifacts 'src/adservice/trivy-image-ad.*'
        //         }
        //     }
        // }
    }

    // --- Final Notifications ---
    post {
        always {
            dir('src/adservice') {
                script {
                    def buildStatus = currentBuild.currentResult
                    def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'Github User'

                    emailext (
                        subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            <p>Adservice DevSecOps pipeline status.</p>
                            <p>Project: ${env.JOB_NAME}</p>
                            <p>Build Number: ${env.BUILD_NUMBER}</p>
                            <p>Build Status: ${buildStatus}</p>
                            <p>Started by: ${buildUser}</p>
                            <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        """,
                        to: "${env.EMAIL}",
                        from: "${env.EMAIL}",
                        mimeType: 'text/html',
                        attachmentsPattern: 'dependency-check-report.xml,trivy-fs-report.txt,trivy-image-ad.json,trivy-image-ad.txt'
                    )
                }
            }
        }
    }
}
