pipeline {
    agent any

    tools {
        // Python already installed via system packages
        jdk 'jdk17'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_NAME  = 'rushi2323/loadgenerator'
        IMAGE_NAME   = 'loadgenerator'
        PATH = "$PATH:/var/lib/jenkins/.local/bin"
        EMAIL = 'rushimane2606@gmail.com'
    }

    stages {
        stage("Clean Workspace") { steps { cleanWs() } }

        stage("Git Checkout") {
            steps { git branch: 'main', url: 'https://github.com/rushi2828/microservices-demo.git' }
        }

        stage("Bandit Security Scan") {
            steps {
                dir('src/loadgenerator') {
                    sh '''
                    python3 -m pip install --user --upgrade bandit
                    bandit -r . -f json -o bandit-report.json || true
                    '''
                }
            }
            post { always { archiveArtifacts 'src/loadgenerator/bandit-report.json' } }
        }

        stage("SonarQube Analysis") {
            steps {
                dir('src/loadgenerator') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                          -Dsonar.projectKey=loadgenerator \
                          -Dsonar.projectName=loadgenerator \
                          -Dsonar.sources=. \
                          -Dsonar.language=py
                        '''
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 3, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                    }
                }
            }
        }

        stage("Install Dependencies") {
            steps { dir('src/loadgenerator') { sh 'python3 -m pip install --user -r requirements.txt || true' } }
        }

        stage("Safety Dependency Scan") {
            steps {
                dir('src/loadgenerator') {
                    sh '''
                    python3 -m pip install --user safety
                    safety check --full-report --output json > safety-report.json || true
                    '''
                }
            }
            post { always { archiveArtifacts 'src/loadgenerator/safety-report.json' } }
        }

        stage("Trivy File Scan") {
            steps {
                dir('src/loadgenerator') {
                    sh 'trivy fs . --severity CRITICAL,HIGH --exit-code 1 --scanners vuln,misconfig,secret > trivy-fs-report.txt || true'
                }
            }
            post { always { archiveArtifacts 'src/loadgenerator/trivy-fs-report.txt' } }
        }

        stage("Build Docker Image") {
            steps {
                dir('src/loadgenerator') {
                    script {
                        env.IMAGE_TAG = "${DOCKER_NAME}:${BUILD_NUMBER}"
                        sh "docker rmi -f ${IMAGE_NAME} ${env.IMAGE_TAG} || true"
                        sh "docker build -t ${IMAGE_NAME} ."
                        sh "docker tag ${IMAGE_NAME} ${env.IMAGE_TAG}"
                    }
                }
            }
        }

        stage("Push to DockerHub") {
            steps {
                dir('src/loadgenerator') {
                    withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
                        sh "docker login -u rushi2323 -p ${dockerpwd}"
                        sh "docker push ${IMAGE_TAG}"
                        sh "docker tag ${IMAGE_NAME} ${DOCKER_NAME}:latest"
                        sh "docker push ${DOCKER_NAME}:latest"
                    }
                }
            }
        }

        stage("Trivy Scan Image") {
            steps {
                dir('src/loadgenerator') {
                    sh '''
                    trivy image -f json -o trivy-image-email.json ${IMAGE_TAG}
                    trivy image -f table -o trivy-image-email.txt ${IMAGE_TAG}
                    '''
                }
            }
            post { always { archiveArtifacts 'src/loadgenerator/trivy-image-email.*' } }
        }
    }

    post {
        always {
            dir('src/loadgenerator') {
                script {
                    def buildStatus = currentBuild.currentResult
                    def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'Github User'
                    emailext (
                        subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            <p>loadgenerator DevSecOps pipeline status.</p>
                            <p>Project: ${env.JOB_NAME}</p>
                            <p>Build Number: ${env.BUILD_NUMBER}</p>
                            <p>Build Status: ${buildStatus}</p>
                            <p>Started by: ${buildUser}</p>
                            <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        """,
                        to: "${env.EMAIL}",
                        from: "${env.EMAIL}",
                        mimeType: 'text/html',
                        attachmentsPattern: 'bandit-report.json,safety-report.json,trivy-fs-report.txt,trivy-image-email.json,trivy-image-email.txt'
                    )
                }
            }
        }
    }
}
