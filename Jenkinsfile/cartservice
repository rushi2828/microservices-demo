pipeline {
    agent any

    tools {
        // .NET SDK should be installed in Jenkins global tools config
        dotnetsdk 'dotnet9'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_NAME  = 'rushi2323/cartservice'
        IMAGE_NAME   = 'cartservice'
        EMAIL        = 'rushimane2606@gmail.com'
    }

    stages {
        stage("Clean Workspace") {
            steps { cleanWs() }
        }

        stage("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/rushi2828/microservices-demo.git'
            }
        }

        // --- SAST: SonarQube for C# ---
        stage("SonarQube Analysis") {
            steps {
                dir('src/cartservice') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        dotnet tool install --global dotnet-sonarscanner || true
                        export PATH="$PATH:$HOME/.dotnet/tools"

                        dotnet sonarscanner begin /k:"cartservice" /d:sonar.host.url=$SONAR_HOST_URL /d:sonar.login=$SONAR_AUTH_TOKEN
                        dotnet build
                        dotnet sonarscanner end /d:sonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        // --- Quality Gate ---
        stage("Quality Gate") {
            steps {
                dir('src/cartservice') {
                    script {
                        timeout(time: 3, unit: 'MINUTES') {
                            try {
                                waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                            } catch (Exception e) {
                                echo "Quality Gate failed but continuing for development: ${e.message}"
                                // Uncomment below line to make it non-blocking
                                // currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
        }
        // --- Build & Unit Tests ---
        stage("Build & Test") {
            steps {
                dir('src/cartservice/src') {
                    sh '''
                    dotnet restore
                    dotnet build --no-incremental
                    dotnet test --logger:trx
                    '''
                }
            }
        }

        // --- Dependency Check (SCA) ---
        stage("Dependency Check") {
            steps {
                dir('src/cartservice') {
                    dependencyCheck additionalArguments: ''' 
                        --scan ./ 
                        --format XML 
                        --out dependency-check-report.xml 
                    ''',
                    odcInstallation: 'dp-check'
                }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/dependency-check-report.xml'
                }
            }
        }

        // --- Trivy FS Scan ---
        stage("Trivy File Scan") {
            steps {
                dir('src/cartservice') {
                    sh '''
                    trivy fs . --severity CRITICAL,HIGH --exit-code 1 --scanners vuln,misconfig,secret > trivy-fs-report.txt || true
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/trivy-fs-report.txt'
                }
            }
        }

        // --- Build Docker Image ---
        stage("Build Docker Image") {
            steps {
                dir('src/cartservice/src') {
                    script {
                        env.IMAGE_TAG = "${DOCKER_NAME}:${BUILD_NUMBER}"
                        sh "docker rmi -f ${IMAGE_NAME} ${env.IMAGE_TAG} || true"
                        sh "docker build -t ${IMAGE_NAME} ."
                    }
                }
            }
        }

        // --- Push Docker Image ---
        stage("Push to DockerHub") {
            steps {
                dir('src/cartservice') {
                    withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
                        sh "docker login -u rushi2323 -p ${dockerpwd}"
                        sh "docker tag ${IMAGE_NAME} ${env.IMAGE_TAG}"
                        sh "docker push ${env.IMAGE_TAG}"

                        // Also push latest
                        sh "docker tag ${IMAGE_NAME} ${DOCKER_NAME}:latest"
                        sh "docker push ${DOCKER_NAME}:latest"
                    }
                }
            }
        }

        // --- Trivy Image Scan ---
        stage("Trivy Scan Image") {
            steps {
                dir('src/cartservice') {
                    sh '''
                    trivy image -f json -o trivy-image-cart.json ${IMAGE_TAG}
                    trivy image -f table -o trivy-image-cart.txt ${IMAGE_TAG}
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/trivy-image-cart.txt'
                    archiveArtifacts 'src/cartservice/trivy-image-cart.json'
                }
            }
        }
    }

    // --- Final Notifications ---
    post {
        always {
            dir('src/cartservice') {
                script {
                    def buildStatus = currentBuild.currentResult
                    def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'Github User'

                    emailext (
                        subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            <p>Cartservice DevSecOps pipeline status.</p>
                            <p>Project: ${env.JOB_NAME}</p>
                            <p>Build Number: ${env.BUILD_NUMBER}</p>
                            <p>Build Status: ${buildStatus}</p>
                            <p>Started by: ${buildUser}</p>
                            <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        """,
                        to: "${env.EMAIL}",
                        from: "${env.EMAIL}",
                        mimeType: 'text/html',
                        attachmentsPattern: 'trivy-fs-report.txt,trivy-image-cart.json,trivy-image-cart.txt,dependency-check-report.xml'
                    )
                }
            }
        }
    }
}
