pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node20'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_NAME  = 'rushi2323/currencyservice'
        IMAGE_NAME   = 'currencyservice'
        EMAIL        = 'rushimane2606@gmail.com'
    }

    stages {
        stage("Clean Workspace") {
            steps { cleanWs() }
        }

        stage("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/rushi2828/microservices-demo.git'
            }
        }

        // --- SAST: SonarQube for Node.js ---
        stage("SonarQube Analysis") {
            steps {
                dir('src/currencyservice') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                          -Dsonar.projectKey=currencyservice \
                          -Dsonar.projectName=currencyservice \
                          -Dsonar.sources=. \
                          -Dsonar.language=js
                        '''
                    }
                }
            }
        }

        // --- Quality Gate ---
        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 3, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                    }
                }
            }
        }

        // --- Install Dependencies ---
        stage("Install Dependencies") {
            steps {
                dir('src/currencyservice') {
                    sh "npm install"
                }
            }
        }

        // --- OWASP Dependency Check ---
        stage("OWASP FS Scan") {
            steps {
                dir('src/currencyservice') {
                    dependencyCheck additionalArguments: '''
                        --scan ./ 
                        --disableYarnAudit 
                        --disableNodeAudit 
                    ''',
                    odcInstallation: 'dp-check'

                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
            post {
                always {
                    archiveArtifacts 'src/currencyservice/dependency-check-report.xml'
                }
            }
        }

        // --- Trivy FS Scan ---
        stage("Trivy File Scan") {
            steps {
                dir('src/currencyservice') {
                    sh '''
                    trivy fs . --severity CRITICAL,HIGH --exit-code 1 --scanners vuln,misconfig,secret > trivy-fs-report.txt || true
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/currencyservice/trivy-fs-report.txt'
                }
            }
        }

        // --- Build Docker Image ---
        stage("Build Docker Image") {
            steps {
                dir('src/currencyservice') {
                    script {
                        env.IMAGE_TAG = "$DOCKER_NAME:${BUILD_NUMBER}"
                        sh "docker rmi -f $IMAGE_NAME ${env.IMAGE_TAG} || true"
                        sh "docker build -t $IMAGE_NAME ."
                        sh "docker tag $IMAGE_NAME ${env.IMAGE_TAG}"
                    }
                }
            }
        }

        // --- Push Docker Image ---
        stage("Push to DockerHub") {
            steps {
                dir('src/currencyservice') {
                    withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
                        sh '''
                        echo "${dockerpwd}" | docker login -u rushi2323 --password-stdin
                        docker push ${IMAGE_TAG}
                        docker tag ${IMAGE_NAME} ${DOCKER_NAME}:latest
                        docker push ${DOCKER_NAME}:latest
                        docker logout
                        '''
                    }
                }
            }
        }

        // --- Trivy Image Scan ---
        stage("Trivy Scan Image") {
            steps {
                dir('src/currencyservice') {
                    sh '''
                    trivy image -f json -o trivy-image-currency.json ${IMAGE_TAG}
                    trivy image -f table -o trivy-image-currency.txt ${IMAGE_TAG}
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/currencyservice/trivy-image-currency.json'
                    archiveArtifacts 'src/currencyservice/trivy-image-currency.txt'
                }
            }
        }
    }

    // --- Final Notifications ---
    post {
        always {
            dir('src/currencyservice') {
                script {
                    def buildStatus = currentBuild.currentResult
                    def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'Github User'

                    emailext (
                        subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            <p><b>Currencyservice DevSecOps pipeline</b> status summary:</p>
                            <ul>
                              <li><b>Project:</b> ${env.JOB_NAME}</li>
                              <li><b>Build Number:</b> ${env.BUILD_NUMBER}</li>
                              <li><b>Status:</b> ${buildStatus}</li>
                              <li><b>Started by:</b> ${buildUser}</li>
                              <li><b>Build URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                            </ul>
                        """,
                        to: "${env.EMAIL}",
                        from: "${env.EMAIL}",
                        mimeType: 'text/html',
                        attachmentsPattern: 'trivy-fs-report.txt,trivy-image-currency.json,trivy-image-currency.txt,dependency-check-report.xml'
                    )
                }
            }
        }
    }
}
